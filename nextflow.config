manifest {
  author = 'connor-lab: Matt Bull, Sendu Bala. BCCDC-PHL: Dan Fornika. oicr-gsi: Jared Simpson, Michael Laszloffy. artic-network: Sam Wilkinson, Rachel Colquhoun'
  name = 'artic-network/artic-mpxv-illumina-nf'
  homePage = 'https://github.com/artic-network/artic-mpxv-illumina-nf'
  description = 'Epi2me compatible Nextflow pipeline for processing ARTIC tiling amplicon Illumina sequencing reads from monkeypox virus (MPXV) samples.'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '1.4.3'
  defaultBranch = 'main'
}

epi2melabs {
    tags = 'mpox,artic,amplicon,viruses,public health,illumina'
    icon = 'faVirusCovid'
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.conf'

def makeFastqSearchPath ( illuminaSuffixes, fastq_exts ) {
    if ( params.directory ) {
      def fastq_searchpath = []
      for (item in illuminaSuffixes){
          for(thing in fastq_exts){
              fastq_searchpath.add(params.directory.toString() + '/**' + item.toString() + thing.toString())
          }
      }
      return fastq_searchpath
    }
}

params {

  wf {
      example_cmd = [
          "--directory 'some_directory_containing_fastqs'",
          "--prefix 'some_prefix'",
          "--scheme_version 'artic-mpox/v1.1.1-cladeI'",
          "--clade 'cladei'",
          "--store_dir '/some/store_dir'",
      ]
  }

  illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
  fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
  fastqSearchPath = makeFastqSearchPath( params.illuminaSuffixes, params.fastq_exts )

  max_memory                 = '32.GB'
  max_cpus                   = 16
  max_time                   = '12.h'

  // Boilerplate options
  directory = false
  prefix = false
  // primer_pairs_tsv = 'NO_FILE'
  // profile = false
  help = false
  outdir = 'output'
  store_dir = 'store_dir'
  version = false

  // // depth normalization
  skip_normalize_depth = false

  // Discard read pairs where the primers assigned to each read do not match
  discard_incorrect_primer_pairs = false

  // Target depth for bbnorm kmer-based depth normalization
  normalizationTargetDepth = 200

  // Allow primer positions to match within this distance from the start/end of the read
  primer_match_threshold = 35

  // Minimum mapping quality for reads to be kept
  min_mapq = 20

  //Scheme Name
  scheme_name = "MPXV"

  // frequency threshold to call ambiguous variant
  varMinFreqThreshold = 0.25
    
  // frequency threshold for unambiguous variant
  varFreqThreshold = 0.75

  // Minimum coverage depth to call variant
  varMinDepth = 10

  // Align consensus sequences to reference and concatenate
  align_consensus = false

  custom_scheme = false

  skip_host_filter = false

  // List schemes without running analysis
  list_schemes = false
  monochrome_logs = false
  validate_params = true
  show_hidden_params = false
  schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wf,fastqSearchPath,fastq_exts,illuminaSuffixes,out_dir,illumina-suffixes,run_phylo,no_mask'

  // Squirrel options
  skip_squirrel = false
  no_mask = false
  clade = null
  run_phylo = false
  outgroups = null
  squirrel_assembly_refs = null

}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    standard {
        docker.enabled         = true
        docker.registry        = 'quay.io'
        docker.runOptions      = "--user \$(id -u):\$(id -g) --group-add 100"
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    test      { includeConfig 'conf/test.conf'      }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  overwrite = true
  file = "${params.outdir}/execution/timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.outdir}/execution/report.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.outdir}/execution/trace.txt"
}


def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
